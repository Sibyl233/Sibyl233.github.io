<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>备忘录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sibyl233.github.io/"/>
  <updated>2020-04-21T12:12:53.874Z</updated>
  <id>http://sibyl233.github.io/</id>
  
  <author>
    <name>Sibyl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习笔记</title>
    <link href="http://sibyl233.github.io/2020/02/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://sibyl233.github.io/2020/02/25/机器学习笔记/</id>
    <published>2020-02-25T09:03:04.000Z</published>
    <updated>2020-04-21T12:12:53.874Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><h3 id="1-1-机器学习定义"><a href="#1-1-机器学习定义" class="headerlink" title="1.1 机器学习定义"></a>1.1 机器学习定义</h3><p>第一个定义——Arthur Samuel对机器学习的定义：</p><blockquote><p>机器学习是这样的领域，它赋予计算机学习的能力，这种学习能力不是通过显著式编程获得的。</p></blockquote><ul><li>显著式编程：比如发一系列指令（左转-开门-右转……）让机器人到教室门外的咖啡机前冲咖啡，其劣势是需要把机器人所处的环境调查得一清二楚，</li><li>非显著式编程：让计算机自己总结规律的编程方法。比如规定行为（如左转、后退等）和收益函数（如摔倒时收益函数为负值），让计算机自己去找最大化收益函数的行为模式。</li></ul><p>第二个定义——Tom Mitshell于1998年在他的书《Machine Learning》中的定义</p><blockquote><p>一个计算机程序被称为可以学习，是指它能够针对某个任务T和某个性能指标P，从经验E中学习。这种学习的特点是，它在T上的被P所衡量的性能，会随着经验E的增加而提高。</p></blockquote><ul><li>任务（Task, T）</li><li>经验（Experience, E）</li><li>性能指标（Performance Measure, P）</li></ul><h3 id="1-2-机器学习任务的分类"><a href="#1-2-机器学习任务的分类" class="headerlink" title="1.2 机器学习任务的分类"></a>1.2 机器学习任务的分类</h3><p>按照任务是否需要和环境交互获得经验分为<strong>监督学习</strong>和<strong>强化学习</strong>两类。比如在以下四个任务中，2和3属于监督学习，所有经验E都是人工采集（训练数据+标签）并输入计算机；1和4属于强化学习，经验E是由计算机与环境互动获得的。不过这样的划分并不绝对，比如在ALPHAGO中，首先通过监督学习（棋局）获得初始围棋程序，再通过强化学习提升棋力。</p><ol><li>教计算机下棋</li><li>垃圾邮件识别</li><li>人脸识别</li><li>无人驾驶</li></ol><p>对于<strong>监督学习</strong>可以进一步分类。</p><ul><li>按照训练数据是否存在标签分为<ul><li>传统监督学习<ul><li>支持向量机</li><li>人工神经网络</li><li>深度神经网络</li></ul></li><li>无监督学习<ul><li>聚类</li><li>EM算法</li><li>主成分分析</li></ul></li><li>半监督学习</li></ul></li><li>按照标签是连续还是离散分为<ul><li>分类</li><li>回归</li></ul></li></ul><h3 id="1-3-机器学习算法的过程"><a href="#1-3-机器学习算法的过程" class="headerlink" title="1.3 机器学习算法的过程"></a>1.3 机器学习算法的过程</h3><p>特征提取、特征选择 → 不同的算法对特征空间做不同的划分 → 不同的结果</p><h3 id="1-4-没有免费午餐定理"><a href="#1-4-没有免费午餐定理" class="headerlink" title="1.4 没有免费午餐定理"></a>1.4 没有免费午餐定理</h3><p>1995年，D.H.Wolpert等人提出没有免费午餐定理（No Free Lunch Theorem）：</p><blockquote><p>任何一个预测函数，如果在一些训练样本上表现好，那么必然在另一些训练样本上表现不好，如果不对数据在特征空间的先验分布有一定假设，那么表现好与表现不好的情况一样多。</p></blockquote><p>即如果不对特征空间的先验分布有假设，那么所有算法的表现都是一样的。再好的算法也有犯错的风险，因为机器学习的本质是通过有限的已知数据在复杂的高维特征空间中预测未知的样本，然而没有人知道未知样本在哪里，性质到底如何；也没有放之四海而皆准的最好算法，因为评价算法的好坏涉及到对特征空间先验分布的假设，然而没有人知道先验分布的真实样子。</p><p>在设计机器学习算法时的常用假设：</p><blockquote><p>在特征空间上距离接近的样本，他们属于同一个类别的概率会更高。</p></blockquote><h2 id="2-支持向量机"><a href="#2-支持向量机" class="headerlink" title="2 支持向量机"></a>2 支持向量机</h2><h3 id="2-1-问题描述"><a href="#2-1-问题描述" class="headerlink" title="2.1 问题描述"></a>2.1 问题描述</h3><p>首先，明确线性可分和非线性可分的基础概念。</p><ul><li><p>直观定义：</p><ul><li>对于二维特征空间，存在一条直线将训练样本分开为线性可分，反之为非线性可分；</li><li>对于高维特征空间，存在一个超平面将训练样本分开为线性可分，反之为非线性可分。</li></ul></li><li><p>数学定义：</p></li></ul><p>假设我们有$N$个训练样本和它们的标签：<br>$$<br>\begin{aligned}<br>  &amp;\left{\left(X_{1}, y_{1}\right),\left(X_{2}, y_{2}\right), \ldots,\left(X_{N}, y_{N}\right)\right}\<br>  &amp;X_{i}=\left[x_{i 1}, x_{i 2}\right]^{T}\<br>  &amp;y_{i}={+1,-1}<br>  \end{aligned}<br>$$<br>线性可分是指存在 $(\omega,b)$ 使得对 $i=1\sim N$ 有<br>$$<br>y_{i}\left(\omega^{T} X_{i}+b\right)&gt;0<br>$$</p><p>1995年，Vladimir Vapnik提出支持向量机寻找的最优分类直线应满足以下3个条件。</p><ol><li>该直线分开了两类</li><li>该直线最大化间隔（margin）</li><li>该直线处于间隔的中间，到所有支持向量的距离相等</li></ol><p>此时我们把样本点中与分离超平面距离最近的数据点称为<strong>支持向量</strong>。在决定最佳超平面时只有支持向量起作用，而其他数据点并不起作用。如果移动非支持向量，甚至删除非支持向量都不会对最优超平面产生任何影响。</p><h3 id="2-2-线性可分-硬间隔"><a href="#2-2-线性可分-硬间隔" class="headerlink" title="2.2 线性可分-硬间隔"></a>2.2 线性可分-硬间隔</h3><p>假定训练样本是线性可分的，该优化问题可以写成如下形式：<br>$$<br>\begin{eqnarray<em>}<br>\text {Minimize: }&amp;&amp; \frac{1}{2}|\omega|^{2} \tag{2.2.1}\<br>\text{s.t.: }&amp;&amp; {y}<em>{i}\left(\omega^{T} x</em>{i}+b\right) \geq 1,(i=1 \sim N) \tag{2.2.2}<br>\end{eqnarray</em>}<br>$$<br>其中待求的是 $\omega$ 和 $b$ ，该形式的推导过程如下。</p><p><strong>[事实1]</strong> $(\omega,b)$ 表示的超平面和 $(a\omega,ab)$ 表示的超平面是同一个平面。所以我们可以用参数 $a$ 来缩放 $(\omega,b)$，使它满足下式。<br>$$<br>\begin{aligned}<br>&amp;\left|\omega^{T} x_{0}+b\right|=1 \quad \text{on support vector}\ x_{0}\<br>&amp;\left|\omega^{T} x_{0}+b\right|&gt;1 \quad \text{on non-support vectors}<br>\end{aligned}<br>$$<br>限制条件 (2.2.2) 中 $y_{i}$ 可以协调超平面的左右，使得对于非支持向量分布于超平面的两侧。</p><p><strong>[事实2]</strong> 支持向量到超平面的距离公式众所周知。结合事实1可得到下式，所以要最大化支持向量到超平面的距离就等价于最小化 $|\omega|$。<br>$$<br>d=\frac{\left|\omega^{T} x_{0}+b\right|}{|\omega|}=\frac{1}{|\omega|}<br>$$<br> 最后目标函数的形式如 (2.2.1) 所示，主要是为了求导的方便。</p><h3 id="2-3-非线性可分-软间隔"><a href="#2-3-非线性可分-软间隔" class="headerlink" title="2.3 非线性可分-软间隔"></a>2.3 非线性可分-软间隔</h3><p>在线性不可分情况下，不存在 $(\omega,b)$ 满足如 (2.2.2) 的限制条件，所以需要适当放松限制条件，引入松弛变量 $\delta_{i}$ ，同时也要限制 $\delta_{i}$ 的范围避免其无限大。改造后的优化问题如下所示：<br>$$<br>\begin{eqnarray<em>}<br>\text {Minimize: }&amp;&amp; \frac{1}{2}|\omega|^{2}+C \sum_{i=1}^{N} \delta_{i}^{2}\<br>\text{s.t.: }&amp;&amp;(1)\ \delta_{i} \geq 0,(i=1 \sim N)\<br>&amp;&amp;(2)\ y_{i}\left(\omega^{T} X_{i}+b\right) \geq 1-\delta_{i},(i=1 \sim N)<br>\end{eqnarray</em>}<br>$$<br>其中 $(\omega,b,\delta_{i})$ 为待求项，比例因子 $C$ 作为<strong>超参数 (Hyper Parameter)</strong> 需要人为设定，起到了平衡两项的作用。</p><h3 id="2-4-非线性可分-核技巧"><a href="#2-4-非线性可分-核技巧" class="headerlink" title="2.4 非线性可分-核技巧"></a>2.4 非线性可分-核技巧</h3><p>软间隔的方式作用有限，对于非线性可分数据集有时需要曲面，所以只能扩大可选函数的范围使其超越线性。基本思路是将训练样本的特征空间从低维映射到高维，再用线性超平面对数据进行分类。以异或问题为例：</p><p>我们不妨先假设这个映射函数为 $\phi(x)$ ，那么优化问题将变为如下形式：<br>$$<br>\begin{eqnarray<em>}<br>\text {Minimize: }&amp;&amp; \frac{1}{2}|\omega|^{2}+C \sum_{i=1}^{N} \delta_{i}^{2}\<br>\text{s.t.: }&amp;&amp;(1)\ \delta_{i} \geq 0,(i=1 \sim N)\<br>&amp;&amp;(2)\ y_{i}\left[\omega^{T} \varphi(X_{i})+b\right] \geq 1-\delta_{i},(i=1 \sim N)<br>\end{eqnarray</em>}<br>$$<br>求解上述优化问题的对偶问题涉及到计算 $\varphi\left(X_{1}\right)^{T} \varphi\left(X_{2}\right)$。由于特征空间维数可能很高，甚至可能是无穷维，因此直接计算 $\varphi\left(X_{1}\right)^{T}\varphi\left(X_{2}\right)$ 通常是困难的，为了避开这个障碍，我们引入核函数 $K$。后续章节将说明我们不需要显式地定义映射 $\varphi $ 是什么，而只需事先定义核函数 $K$ ，就可以利用解线性问题的方法求解非线性问题的支持向量机。本节首先对核函数 $K$ 有个初步的了解。</p><ul><li><p>核函数的定义：$K\left(X_{1}, X_{2}\right)=\varphi\left(X_{1}\right)^{T} \varphi\left(X_{2}\right)$</p></li><li><p>核函数的充要条件：①交换性；②半正定性 。<strong>（Mercer定理）</strong></p></li><li><p>核函数 $K$ 和映射函数 $\phi $ 一一对应。</p></li><li><p>常用核函数：</p></li></ul><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/常用K.png" alt="常用K" style="zoom: 50%;"><h3 id="2-5-原问题和对偶问题"><a href="#2-5-原问题和对偶问题" class="headerlink" title="2.5 原问题和对偶问题"></a>2.5 原问题和对偶问题</h3><ul><li>原问题（Prime Problem）</li></ul><p>其中自变量 $\omega$ 为多维向量，$f(\omega)$为目标函数，$g_{i}(\omega)$ 和 $h_{i}(\omega)$为限制条件。</p><p>$$<br>\begin{aligned}<br>\text {Minimize: }&amp; f(\omega) \<br>\text{s.t.: }&amp; g_{i}(\omega) \leq 0 \quad i=1 \sim K \<br>&amp;h_{i}(\omega)=0 \quad i=1 \sim m<br>\end{aligned}<br>$$</p><ul><li>对偶问题（Dual Problem）</li></ul><p>首先定义函数<br>$$<br>\begin{aligned}<br>L(\omega, \alpha, \beta) &amp;=f(\omega)+\sum_{i=1}^{K} \alpha_{i} g_{i}(\omega)+\sum_{i=1}^{M} \beta_{i} h_{i}(\omega) \<br>&amp;=f(\omega)+\alpha^{T} g(\omega)+\beta^{T} h(\omega)<br>\end{aligned}<br>$$<br>在此基础上定义对偶问题如下,其中 $\theta(\alpha, \beta)$ 表示在遍历所有的 $\omega$ 后取 $L(\omega, \alpha, \beta)$ 的最小值<br>$$<br>\begin{aligned}<br>\text{Maxmize: }&amp; \theta(\alpha, \beta)=\inf_{\omega} \ L(\omega, \alpha, \beta) \<br>\text{s.t.: }&amp; \alpha_{i} \geq 0, i=1 \sim K<br>\end{aligned}<br>$$</p><ul><li>原问题与对偶问题的关系</li></ul><p><strong>[定理1] 弱对偶性</strong>：如果 $\omega^<em>$ 是原问题的解，$\alpha^</em>$ 和 $\beta^<em>$  是对偶问题的解，那么<br>$$<br>f\left(\omega^{</em>}\right) \geqslant \theta\left(\alpha^{<em>}, \beta^{</em>}\right)<br>$$<br>证明：<br>$$<br>\begin{aligned}<br>\theta\left(\alpha^{<em>}, \beta^{</em>}\right) &amp;=\inf L\left(\omega, \alpha^{<em>}, \beta^{</em>}\right) \<br>&amp; \leq L\left(w^{<em>}, \alpha^{</em>}, \beta^{<em>}\right) \<br>&amp;=f\left(\omega^{</em>}\right)+\alpha^{* T} g\left(\omega^{<em>}\right)+\beta^{</em> T} h\left(\omega^{<em>}\right) \<br>&amp; \leq f\left(\omega^{</em>}\right)<br>\end{aligned}<br>$$</p><p><strong>[定理2] 强对偶性</strong>：如果 $g(\omega)=A\omega+b$，$h(\omega)=C\omega+d$，$f(\omega)$ 为凸函数，那么<br>$$<br>f\left(\omega^{<em>}\right)=\theta\left(\alpha^{</em>}, \beta^{*}\right)<br>$$<br>证明略，见附录1。</p><p><strong>[定义1] Slater条件</strong>：即强对偶性成立的条件。</p><p><strong>[定义2] KKT条件</strong>：对所有 $i=1\sim K$ 要么 $\alpha_{i}^{<em>}=0$， 要么 $g(\omega^{</em>})=0$</p><p>推导：由定理1证明部分的第3行到第4行易知，要取等号必须满足KKT条件。</p><p>注释：KKT是三人名字的首字母。</p><h3 id="2-6-SVM转化为对偶问题"><a href="#2-6-SVM转化为对偶问题" class="headerlink" title="2.6 SVM转化为对偶问题"></a>2.6 SVM转化为对偶问题</h3><h3 id="2-7-算法总体流程"><a href="#2-7-算法总体流程" class="headerlink" title="2.7 算法总体流程"></a>2.7 算法总体流程</h3><p>接着2.6节，总结支持向量机训练和测试的流程。</p><ul><li>训练过程</li></ul><p>（1）输入训练数据<br>$$<br>\left{\left(X_{i}, y_{i}\right)\right},\text{where }y_{i}={+1,-1}<br>$$<br>（2）用<u>SMO算法</u>求解如下优化问题，解出 $\alpha_{i}$<br>$$<br>\begin{eqnarray<em>}<br>\text{Maxmize: }&amp;&amp; \theta(\alpha, \beta)=\sum_{i=1}^{N} \alpha_{i}-\frac{1}{2} \sum_{i=1}^{N} \sum_{j=1}^{N} y_{i} y_{j} \alpha_{i} \alpha_{j} \varphi\left(X_{i}\right)^{\mathrm{T}} \varphi\left(X_{j}\right) \tag{2.7.1}\<br>\text{s.t.: }&amp;&amp; (1)\ 0\leq \alpha_{i} \leq C, \ i=1 \sim N \<br>&amp;&amp;(2)\ \sum_{i=1}^{N} \alpha_{i} y_{i}=0, \ i=1 \sim N<br>\end{eqnarray</em>}<br>$$<br>（3）找一个 $\alpha_{i}\neq 0$ 且 $\alpha_{i}\neq C$ ，利用下式求 $b$<br>$$<br>b=\frac{1-\sum_{j=1}^{N} \alpha_{j} y_{i} y_{j} K\left(X_{j}, X_{i}\right)}{y_{i}} \tag{2.7.2}<br>$$</p><ul><li><p>测试过程</p><p>考察测试数据 $X$，预测其类别 $y$</p></li></ul><p>$$<br>\begin{aligned}<br>&amp;\text{if }\sum_{i=1}^{N} \alpha_{i} y_{i} K\left(X_{i}, X\right)+b \geq 0, \quad \text{then } y=+1\<br>&amp;\text{if }\sum_{i=1}^{N} \alpha_{i} y_{i} K\left(X_{i}, X\right)+b&lt;0, \quad \text{then } y=-1<br>\end{aligned}<br>$$</p><p><strong>[推导]</strong> 在通过解凸优化问题得到 $\alpha_{i}$ 后，求偏移项 $b$ 的过程如下<br>$$<br>\omega=\sum_{j=1}^{N} \alpha_{j} y_{j} \varphi\left(X_{i}\right)<br>$$</p><p>$$<br>\begin{aligned}\omega^{T} \varphi\left(x_{i}\right) &amp;=\sum_{j=1}^{N} \alpha_{j} y_{j} \varphi\left(X_{j}\right)^{T} \varphi\left(X_{i}\right) \&amp;=\sum_{j=1}^{N} \alpha_{j} y_{j} K\left(X_{j}, X_{i}\right)\end{aligned}<br>$$</p><p>根据KKT条件有<br>$$<br>\begin{aligned}&amp;\alpha_{i}\left[1+\delta_{i}-y_{i} \omega^{T} \varphi\left(X_{i}\right)-y_{i} b\right]=0 \&amp;\beta_{i} \delta_{i}=0 \Rightarrow \left(c-\alpha_{i}\right) \delta_{i}=0\end{aligned}<br>$$<br>如果对某个 $i$，$\alpha_{i}\neq 0$ 且 $\alpha_{i}\neq C$ 那么必有<br>$$<br>\delta_{i}=0 \1+\delta_{i}-y_{i} \omega^{T} \varphi\left(X_{i}\right)-y_{i} b=0<br>$$<br>从而得到式 (2.7.2)<br>$$<br>b=\frac{1-\sum_{j=1}^{N} \alpha_{j} y_{i} y_{j} K\left(X_{j}, X_{i}\right)}{y_{i}}<br>$$</p><p><strong>[注释] SMO算法</strong>：SMO 的基本思路是先固定 $\alpha_{i}$ 之外的所有参数，然后求 $\alpha_{i}$ 的极值。由于存在约束 $\sum_{i=1}^{N} \alpha_{i} y_{i}=0$，若固定 $\alpha_{i}$ 之外的其他变量，则 $\alpha_{i}$ 可由其他变量导出。于是， SMO 每次选择两个变量 $\alpha_{i}$ 和 $\alpha_{j}$ ，并固定其他参数。这样，在参数初始化后， SMO 不断执行如下两个步骤直至收敛：</p><ul><li>选取一对需更新的变量 $\alpha_{i}$ 和 $\alpha_{j}$；</li><li>固定 $\alpha_{i}$ 和 $\alpha_{j}$ 以外的参数，求解式 (2.7.1) 获得更新后的 $\alpha_{i}$ 和 $\alpha_{j}$。</li></ul><p><strong>[概念] 二次规划问题</strong>：二次规划 (Quadratic Programming，简称 QP)是一类典型的优化问题，包括凸二次优化和非凸二次优化。在此类问题中，<u>目标函数是变量的二次函数，而约束条件是变量的线性不等式</u>。假定变量个数为 $d$， 约束条件的个数为 $m$，则标准的二次规划问题形如<br>$$<br>\begin{aligned}<br>&amp;\min _{\boldsymbol{x}} \frac{1}{2} \boldsymbol{x}^{\mathrm{T}} \mathbf{Q} \boldsymbol{x}+\boldsymbol{c}^{\mathrm{T}} \boldsymbol{x}\<br>&amp;\text { s.t. } \quad \mathbf{A} \boldsymbol{x} \leqslant \boldsymbol{b}<br>\end{aligned}<br>$$<br>若 $\mathbf{Q}$ 为半正定矩阵，则目标函数是凸函数，相应的二次规划是凸二次优化问题，此时该问题要么无解要么有全局最小值；若 $\mathbf{Q}$ 为正定矩阵，则该问题有唯一的全局最小值；若 $\mathbf{Q}$ 为非正定矩阵，则上式是有多个平稳点和局部极小点的 NP 难问题。</p><h3 id="2-8-兵王问题"><a href="#2-8-兵王问题" class="headerlink" title="2.8 兵王问题"></a>2.8 兵王问题</h3><h3 id="2-9-性能度量"><a href="#2-9-性能度量" class="headerlink" title="2.9 性能度量"></a>2.9 性能度量</h3><p>首先，介绍混淆矩阵如下：</p><table><thead><tr><th>实际\预测</th><th>正样本</th><th>负样本</th></tr></thead><tbody><tr><td>正样本</td><td>TP (True Positive)</td><td>FN (False Negative)</td></tr><tr><td>负样本</td><td>FP (False Positive)</td><td>TN (True Negative)</td></tr></tbody></table><p>其次，介绍 5 个概率指标：①查准率P；②查全率/召回率R；③真正样本率TPR ；④假正样本率FPR；⑤准确率ACC。<br>$$<br>\begin{aligned}<br>P &amp;=\frac{TP}{TP+FP} \<br>R &amp;=\frac{TP}{TP+FN} \<br>TPR &amp;=\frac{TP}{TP+FN}\<br>FPR &amp;=\frac{FP}{TN+FP} \<br>ACC &amp;= \frac{TP+TN}{TP+FN+FP+TN}<br>\end{aligned}<br>$$<br>接着，明确 3 个关系：①TPR+FNR=1；②FPR+TNR=1；③对同一个系统来说，若TPR增加，则FPR也增加。</p><p>对于第③个关系的直观理解是：如果我们把更多的正样本识别为正样本，则我们一定会把更多的负样本识别为负样本。</p><ul><li><strong>P-R曲线</strong>：横坐标为R，纵坐标为P</li></ul><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/PR.png" alt="PR" style="zoom: 40%;"><ul><li><strong>ROC曲线</strong>：横坐标为FPR，纵坐标为TPR<ul><li>AUC：也就是ROC曲线下的面积，是一个0到1之间的数，AUC越大说明系统性能越好。</li><li>EER ：也就是FPR=FNR的值，由于FNR=1-TPR，可以画一条从 (0,1) 到 (1,0) 的直线来找到交点。ERR越小系统性能越好。</li></ul></li></ul><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/ROC.png" alt="ROC" style="zoom: 33%;"><h3 id="2-10-SVM求解多分类问题"><a href="#2-10-SVM求解多分类问题" class="headerlink" title="2.10 SVM求解多分类问题"></a>2.10 SVM求解多分类问题</h3><p>二分类的多支持向量机求解多分类问题（假设共有K类），有如下2种策略：</p><ol><li>1类对K-1类：需要构造K个支持向量机，存在训练样本不平衡的问题。</li><li>1类对另1类：需要构造K(K-1)/2个支持向量机，存在训练和测试时间过长的问题。</li></ol><p>所以往往综合上述 2 种策略，构造树形分类器。如下图所示，8类只需要构造7个支持向量机，同时兼顾了样本数的平衡。值得一提的是，我们需要保证每个分类器区分的两类的差别是显著的，对于这一点我们可以利用<strong>聚类算法/决策树算法</strong>来解决。</p><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/树状分类器.png" alt="树状分类器" style="zoom:33%;"><h2 id="3-人工神经网络"><a href="#3-人工神经网络" class="headerlink" title="3 人工神经网络"></a>3 人工神经网络</h2><h3 id="3-1-神经元的数学模型"><a href="#3-1-神经元的数学模型" class="headerlink" title="3.1 神经元的数学模型"></a>3.1 神经元的数学模型</h3><p>人工智能的 2 个学派：</p><ul><li>仿生学派：如人工神经网络</li><li>数理学派：如支持向量机</li></ul><p>在生物神经网络中，每个神经元与其他神经元相连，当它”兴奋”时， 就会向相连的神经元发送化学物质，从而改变这些神经元内的电位；如果某神经元的电位超过了 一个”阈值” ，那么它就会被激活，即 “兴奋 “起来，向其他神经元发送化学物质。</p><p>1943年，心理学家W.S.McCulloch和数理逻辑学家W.Pitts将上述情形抽象为图所示的简单模型，这就是一直沿用至今 的 “M-P神经元模型 “ 在这个模型中 ，神经元接收到来自 $n$ 个其他神经元传递过来的输入信号，这些输入信号通过带权重的连接进行传递，神经元接收到的总输入值将与神经元的阀值进行比较，然后通过”激活函数” 处理以产生神经元的输出。</p><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/MP.png" alt="MP" style="zoom: 40%;"><p>[注释1]：为什么采用加权求和加上偏置的形式？如果假设神经元的输出 $y$ 是输入 $x_{i}$ 的函数 $f$，那么 $f$ 的一阶泰勒展开就是这样的形式<br>$$<br>\begin{aligned}<br>y &amp;=f\left(x_{1}, x_{2}, \cdots x_{n}\right) \<br>&amp; \approx f(0,0, \cdots 0)+\sum_{i=1}^{n}\left[\frac{\partial f}{\partial x_{i}} |(0,0, \cdots 0)\right] x_{i}+\ldots \<br>&amp;=\sum_{i=1}^{m} \omega_{i} x_{i}+b<br>\end{aligned}<br>$$</p><h3 id="3-2-感知器算法及其意义"><a href="#3-2-感知器算法及其意义" class="headerlink" title="3.2 感知器算法及其意义"></a>3.2 感知器算法及其意义</h3><p><strong>感知器 (Perceptron)</strong> 由两层神经元组成， 输入层接收外界输入信号，输出层是M-P神经元。其数学表达式为：<br>$$<br>Y=\varphi(W^TX+b)<br>$$<br><strong>感知器算法</strong>从 $(X,y )$ 对中通过学习获得 $W$ 和 $b$，步骤如下：</p><ol><li>随机选择 $W$ 和 $b$</li><li>取一个训练样本 $(X,y )$ <ol><li>若 $W^{T}X+b&gt;0$，且 $y=-1$ 则：$W=W-X,\ b=b-1$</li><li>若 $W^{T}X+b&lt;0$，且 $y=+1$ 则：$W=W+X,\ b=b+1$</li></ol></li><li>再取一个训练样本 $(X,y )$ 回到步骤 2</li><li>终止条件：直到所有输入输出对都不满足步骤 2 中的 2 个情形之一，退出循环</li></ol><p><strong>[证明1]</strong> 步骤 2 的合理性：以情形 1 为例，可以看到新值比原来至少减少了1，从而更加接近平衡<br>$$<br>\begin{aligned}<br>&amp;W_{new}^{\mathrm{T}} X+b_{new} \<br>=&amp;(W-X)s^{T} X+b-1 \<br>=&amp;\left(W^{T} X+b\right)-\left(X^{T} X+1\right). \<br>=&amp;\left(W^{T} X+b\right)-\left(|X|^{2}+1\right). \<br>\leq&amp;\left(W^{T} X+b\right)-1.<br>\end{aligned}<br>$$<br><strong>[证明2]</strong> 步骤 4 的合理性：即证明感知器算法的收敛定理，过程与证明1类似，详见讲义4。将<strong>收敛定理</strong>用增广向量的形式进行描述：对于 $N$ 个增广向量，如果存在一个权重向量 $\omega_{opt}$ 使得对于每一个 $i$ 有  $\omega_{opt}^{T}x_{i}&gt;0$ ，运用上述感知器算法，必能够在有限步内，找到一个 $\omega$ 使得对所有 $i$ 有 $\omega^{T}x_{i}&gt;0$ 。该定理有 2 个注意点：①前提条件：训练集线性可分 (存在一个 $\omega_{opt}$ 使得 $\omega_{opt}^{T}x_{i}&gt;0$ )，所以感知器算法只能解决线性可分问题；②在有限步内找到的 $\omega$ 未必是 $\omega_{opt}$，所以其效果不如支持向量机。</p><p>感知器算法具有重要的历史意义：</p><ul><li>提出了一套机器学习算法的框架：运用训练数据集 $(X_i,y_i)$ 求出待学习的参数 $\theta$，来寻找预测函数 $y=f(X;\theta)$</li></ul><p>$$<br>X \rightarrow f(X;\theta) \rightarrow Y<br>$$</p><ul><li>相较于支持向量机这样的全局优化问题，消耗的计算资源和内存资源较少，是此类算法的先驱。</li></ul><h3 id="3-3-多层神经网络"><a href="#3-3-多层神经网络" class="headerlink" title="3.3 多层神经网络"></a>3.3 多层神经网络</h3><p>单层感知器的学习过程只在训练集线性可分的前提下收敛，若要解决非线性可分问题，就需考虑多层感知器/多层神经网络。比如两层感知器就可以解决非线性的异或问题：</p><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/两层P_1.png" alt="两层P_1" style="zoom:33%;"><p>花点时间明确一下概念</p><ul><li>单层感知器：输入层+输出层</li></ul><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/单层P.png" alt="单层P" style="zoom: 33%;"><ul><li>两层感知器/两层网络/单隐层网络：输入层+隐层+输出层</li></ul><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/两层P_2.png" alt="两层P_2" style="zoom:33%;"><ul><li>三层网络：输入层+隐层1+隐层2+输出层</li></ul><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/三层网络.png" alt="三层网络" style="zoom:33%;"><p><strong>[注释1]</strong> 为什么两层网络看起来有三层？因为输入层神经元仅仅是接受输入，不进行函数处理，所以通常称之为两层网络，为了避免歧义有时也称之为单隐层网络。</p><p><strong>[注释2]</strong> 隐层神经元必须是功能神经元的必要性：不难证明，如果不加非线性函数，多层神经网络将会退化到一个神经元的M-P模型状态。</p><p><strong>[注释3]</strong> 如果层与层之前的非线性函数是阶跃函数，理论上三层神经网络可以模拟任意的非线性函数。</p><h3 id="3-4-梯度下降法"><a href="#3-4-梯度下降法" class="headerlink" title="3.4 梯度下降法"></a>3.4 梯度下降法</h3><p>为了使得神经网络训练的输出 $y$ 和标签 $Y$ 尽可能接近，将优化问题表示如下<br>$$<br>Minimize:E(\omega,b)=E_{(X,Y)}[(Y-y)^2]<br>$$<br>其中 $E_{(X,Y)}$ 是遍历训练样本及标签的数学期望。由于 $y$ 是 $(W,b)$ 的非凸函数，因此无法求到唯一的全局极值，而是用<strong>梯度下降法</strong>求解目标函数的局部极小值。</p><ol><li>随机选取 $\omega$ 和 $b$ 的初始值 $(\omega^{(0)},b^{(0)})$</li><li>应用迭代算法求目标函数的局部极值，其中 $\alpha$ 即<strong>学习率</strong>。</li></ol><p>$$<br>\begin{aligned}<br>&amp;\omega^{(n+1)}=\omega^{(n)}-\left.\alpha \frac{\partial E}{\partial \omega}\right|<em>{\omega^{(n)}, b^{(n)}}\<br>&amp;b^{(n+1)}=b^{(n)}-\left.\alpha \frac{\partial E}{\partial b}\right|</em>{\omega^{(n)}, b^{(n)}}<br>\end{aligned}<br>$$</p><p>如果把梯度下降法应用到一个具体的例子中。</p><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/3例.png" alt="3例" style="zoom:50%;"><p>假设目标函数为：<br>$$<br>Minimize:E(\omega,b)=\frac{1}{2}(Y-y)^2<br>$$<br>那么待估计的参数有：<br>$$<br>(w_{11}, w_{12}, w_{21}, w_{22}, w_{1}, w_{2}, b_{1}, b_{2}, b_{3})<br>$$<br>梯度下降法相应就要求九个偏导数：<br>$$<br>\left(\frac{\partial E}{\partial \omega_{11}}, \frac{\partial E}{\partial \omega_{12}}, \frac{\partial E}{\partial \omega_{21}}, \frac{\partial E}{\partial \omega_{22}}, \frac{\partial E}{\partial \omega_{1}}, \frac{\partial E}{\partial \omega_{2}}, \frac{\partial E}{\partial b_{1}}, \frac{\partial E}{\partial b_{2}}, \frac{\partial E}{\partial b_{3}}\right)<br>$$<br>下一节内容讲的就是如何通过神经网络这种分层结构简化偏导数的计算过程。</p><h3 id="3-5-后向传播算法"><a href="#3-5-后向传播算法" class="headerlink" title="3.5 后向传播算法"></a>3.5 后向传播算法</h3><p><strong>后向传播算法框架</strong></p><ol><li>对神经网络每一层的各个神经元，随机选取相应的 $\omega$ 和 $b$ </li><li>前向计算，对于输入的训练数据，计算并保留每一层的输出值，直到计算出最后一层的输出 $y$</li><li>设置目标函数 $E$，用后向传播算法对每一个 $\omega$ 和 $b$ 计算 $\frac{\partial E}{\partial \omega}, \frac{\partial E}{\partial b}$</li><li>利用梯度下降法，更新 $\omega$ 和 $b$ 的值</li><li>回到第2步，不断循环，直到所有 $\left.\frac{\partial E}{\partial \omega}\right|<em>{\omega^{(n)}, b^{(n)}}$，$\left.\frac{\partial E}{\partial b}\right|</em>{\omega^{(n)}, b^{(n)}}$ 很小为止。退出循环。</li></ol><p><strong>后向传播算法核心</strong></p><p>偏导数之间是相互关联的，根据链式求导法则，可以利用已经算出的偏导数求解其它偏导数。之所以称之为“后向”是因为这是一个从输出往输入推的过程，即先算出离输出较近的偏导数，再计算离输出较远的偏导数。</p><p>先考虑一个简单的例子，对应上一讲，将网络写成数学表达式。</p><img src="/2020/02/25/机器学习笔记/sibyl/Personal/blog/source/_posts/2020-02-25-机器学习笔记/3例_2.png" alt="3例_2" style="zoom:45%;">$$\begin{array}{l}a_{1}=w_{11} x_{1}+w_{12} x_{2}+b_{1} \\a_{2}=w_{21} x_{1}+w_{22} x_{2}+b_{2} \\z_{1}=\varphi\left(a_{1}\right) \\z_{2}=\varphi\left(a_{2}\right) \\y=w_{1} z_{1}+w_{2} z_{2}+b_{3}\end{array}$$首先求解如图标记的3个偏导数：$$\begin{eqnarray*}&&\frac{\partial E}{\partial y}=y-Y \\&&\frac{\partial E}{\partial a_{1}}=\frac{\partial E}{\partial y} \frac{\partial y}{\partial a_{1}}=\frac{\partial E}{\partial y} \frac{\partial y}{\partial z_{1}} \frac{d z_{1}}{d a_{1}}=\omega_{1}(y-Y) \varphi^{\prime}\left(a_{1}\right) \\&&\frac{\partial E}{\partial a_{2}}=\frac{\partial E}{\partial y} \frac{\partial y}{\partial a_{2}}=\frac{\partial E}{\partial y} \frac{\partial y}{\partial z_{2}} \frac{d z_{2}}{d a_{2}}=\omega_{2}(y-Y) \varphi^{\prime}\left(a_{2}\right)\end{eqnarray*}$$求得上述枢纽函数的偏导数之后，由 $y=w_{1} z_{1}+w_{2} z_{2}+b_{3}$ 易得：$$\begin{aligned}&\frac{\partial E}{\partial \omega_{1}}=\frac{\partial E}{\partial y} \frac{\partial y}{\partial \omega_{1}}=(y-Y) Z_{1}\\&\frac{\partial E}{\partial \omega_{2}}=\frac{\partial E}{\partial y} \frac{\partial y}{\partial \omega_{2}}=(y-Y) Z_{2}\\&\frac{\partial E}{\partial b_{3}}=\frac{\partial E}{\partial y} \frac{\partial y}{\partial b_{3}}=y-Y\end{aligned}$$<p>由 $a_{1}=w_{11} x_{1}+w_{12} x_{2}+b_{1}$ 易得：<br>$$<br>\begin{aligned}<br>&amp;\frac{\partial E}{\partial \omega_{11}}=\frac{\partial E}{\partial a_{1}} \frac{\partial a_{1}}{\partial \omega_{11}}=\omega_{1}(y-Y) \varphi^{\prime}\left(a_{1}\right) x_{1} \<br>&amp;\frac{\partial E}{\partial \omega_{12}}=\frac{\partial E}{\partial a_{1}} \frac{\partial a_{1}}{\partial \omega_{12}}=\omega_{1}(y-Y) \varphi^{\prime}\left(a_{1}\right) x_{2} \<br>&amp;\frac{\partial E}{\partial b_{1}}=\frac{\partial E}{\partial a_{1}} \frac{\partial a_{1}}{\partial b_{1}}=\omega_{1}(y-Y) \varphi^{\prime}\left(a_{1}\right)<br>\end{aligned}<br>$$<br> 由 $a_{2}=w_{21} x_{1}+w_{22} x_{2}+b_{2}$ 易得：<br>$$<br>\begin{aligned}<br>&amp;\frac{\partial E}{\partial \omega_{21}}=\frac{\partial E}{\partial a_{2}} \frac{\partial a_{2}}{\partial \omega_{21}}=\omega_{2}(y-Y) \varphi^{\prime}\left(a_{2}\right) x_{1} \<br>&amp;\frac{\partial E}{\partial \omega_{22}}=\frac{\partial E}{\partial a_{2}} \frac{\partial a_{2}}{\partial \omega_{22}}=\omega_{2}(y-Y) \varphi^{\prime}\left(a_{2}\right) x_{2} \<br>&amp;\frac{\partial E}{\partial b_{2}}=\frac{\partial E}{\partial a_{2}} \frac{\partial a_{2}}{\partial b_{2}}=\omega_{2}(y-Y) \varphi^{\prime}\left(a_{2}\right)<br>\end{aligned}<br>$$<br>至此求得了九个偏导数。</p><p>接下来，我们考虑更一般的情况。将神经网络写成矩阵形式的如下表示式。其中 ①网络共有 $l$ 层；② $z^{(k)},a^{(k)},b^{(k)}$ 为向量，用 $z_{i}^{(k)},a_{i}^{(k)},b_{i}^{(k)}$ 表示其第 $i$ 个分量；③输出 $y$ 可以是向量，用 $y_i$ 表示其第 $i$ 个分量。<br>$$<br>\begin{array}{l}x=a^{(0)} \Rightarrow z^{(1)}=w^{(1)} a^{(0)}+b^{(1)} \Rightarrow a^{(1)}=\varphi\left(z^{(1)}\right) \ \quad \Rightarrow z^{(2)}=w^{(2)} a^{(1)}+b^{(2)} \Rightarrow a^{(2)}=\varphi\left(z^{(2)}\right) \cdots \ \cdots \Rightarrow z^{(m)}=w^{(m)} a^{(m-1)}+b^{(m)} \Rightarrow a^{(m)}=\varphi\left(z^{(m)}\right) \cdots \ \quad \cdots \Rightarrow z^{(l)}=w^{(l)} a^{(l-1)}+b^{(l)} \Rightarrow y=a^{(l)}=\varphi\left(z^{(l)}\right)\end{array}<br>$$<br>同样假设目标函数为：<br>$$<br>Minimize:E(\omega,b)=\frac{1}{2}(Y-y)^2<br>$$<br>设置枢纽变量为：<br>$$<br>\delta_{i}^{(\mathrm{m})}=\frac{\partial E}{\partial z_{i}^{(m)}}<br>$$<br>最后一层为：<br>$$<br>\delta_{i}^{(l)}=\frac{\partial E}{\partial z_{i}^{(l)}}=\frac{\partial E}{\partial y_{i}} \cdot \frac{\partial y_{i}}{\partial z_{i}^{(l)}}=\left(y_{i}-Y_{i}\right) \varphi^{\prime}\left(z_{i}^{(l)}\right)<br>$$<br>通过第 $m+1$ 层推导到第 $m$ 层：<br>$$<br>\begin{eqnarray<em>} \delta_{i}^{(m)}=\frac{\partial E}{\partial z_{i}^{(m)}} &amp;&amp;=\sum_{j=1}^{S_{m+1}} \frac{\partial E}{\partial z_{j}^{(m+1)}} \cdot \frac{\partial z_{j}^{(m+1)}}{\partial z_{i}^{(m)}} \<br>&amp;&amp;=\sum_{j=1}^{S_{m+1}} \delta_{j}^{(m+1)} \frac{\partial z_{j}^{(m+1)}}{\partial z_{i}^{(m)}} \<br>&amp;&amp;=\left[\sum_{j=1}^{S_{m+1}} \delta_{j}^{(m+1)} W_{j i}^{(m+1)}\right] \varphi^{\prime}\left(Z_{i}^{(m)}\right) \tag{3.5.1}<br>\end{eqnarray</em>}<br>$$<br>其中第2行到第3行的推导：<br>$$<br>\begin{aligned} \frac{\partial z_{j}^{(m+1)}}{\partial z_{i}^{(m)}} &amp;=\frac{\partial z_{j}^{(m+1)}}{\partial \mathbf{a}<em>{i}^{(m)}} \frac{\partial a</em>{j}^{(m)}}{\partial z_{i}^{(m)}} \ &amp;=W_{j i}^{(m+1)} \varphi^{\prime}\left(Z_{i}^{(m)}\right) \end{aligned}<br>$$<br>式（3.5.1）表明我们可以通过 $\delta_{i}^{(l)}$ 逐层向前递推 $\delta_{i}^{(m)}$，也易得：<br>$$<br>\begin{eqnarray<em>}<br>&amp;&amp;\frac{\partial E}{\partial W_{j i}^{(m)}}=\delta_{j}^{(m)} \cdot a_{i}^{(m-1)} \tag{3.5.2}\<br>&amp;&amp;\frac{\partial E}{\partial b_{i}^{(m)}}=\delta_{i}^{(m)}\tag{3.5.3}<br>\end{eqnarray</em>}<br>$$</p><h3 id="3-6-三个改进"><a href="#3-6-三个改进" class="headerlink" title="3.6 三个改进"></a>3.6 三个改进</h3><ul><li>非线性函数的改进</li></ul><p>问题：如果层与层之间的函数为阶跃函数，那么求导就会出现问题。</p><p>改进：常用的非线性函数有</p><ul><li>目标函数的改进</li></ul><p>问题：</p><p>改进：常采用基于softmax和cross-entropy的目标函数。</p><ul><li>参数更新的改进</li></ul><p>问题：如果每输入一个样本就更新参数，网络训练速度过慢；单一数据带来的随机性，使得算法收敛缓慢</p><p>改进：采用随机梯度下降法(SGD)。输入一批样本(batch或mini-batch)，求出这些样本的梯度平均值后根据这个平均值改变参数。在神经网络训练中，batch的样本数(batchsize)大致设置为50~200不等。对于所有训练数据，根据batch size分割为各个不同的batch。一个epoch指的是按照batch遍历所有训练样本一次。实际训练中，往往训练多个epoch，对于每一个epoch需要随机打乱所有训练样本的次序，增加batch中训练样本的随机性。</p><h2 id="5-强化学习"><a href="#5-强化学习" class="headerlink" title="5 强化学习"></a>5 强化学习</h2><h3 id="5-1-传统强化学习算法"><a href="#5-1-传统强化学习算法" class="headerlink" title="5.1 传统强化学习算法"></a>5.1 传统强化学习算法</h3><p>Q-Learning 算法</p><p>epsilion-greedy 算法</p><h3 id="5-2-深度强化学习"><a href="#5-2-深度强化学习" class="headerlink" title="5.2 深度强化学习"></a>5.2 深度强化学习</h3><p>蒙特卡洛算法：是利用一个回合结束后得到的奖励来更新当前的Q值；</p><p>时序差分更新：希望可以尽早的更新Q值，而不是只有等到一个回合结束之后才能更新。</p><p>两者更新公式的常用形式分别如下：</p><p><img src="https://panchuang.net/wp-content/uploads/2019/11/1-1573310259.png" alt="img"></p><p><img src="https://panchuang.net/wp-content/uploads/2019/11/9-1573310259.png" alt="img"></p><p>$Q(s_t,a_t)$ 的值表示 agent 在状态 $s_t$ 下，执行动作 $a_t$ 后，沿着当前策略走下去后所能得到的累积奖励的期望，是对奖励的一个估计值。所以从处理奖励值的角度看：蒙特卡洛算法中走完一个回合后得到的G是真实的奖励值，而时序差分学习则是用估计的奖励值替代真实的奖励值来更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="笔记" scheme="http://sibyl233.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Zotero简明使用指南</title>
    <link href="http://sibyl233.github.io/2020/01/08/Zotero%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://sibyl233.github.io/2020/01/08/Zotero简明使用指南/</id>
    <published>2020-01-08T08:22:23.000Z</published>
    <updated>2020-04-21T12:12:47.162Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="下载与基本设置"><a href="#下载与基本设置" class="headerlink" title="下载与基本设置"></a>下载与基本设置</h4><ul><li><p>下载<br><a href="https://www.zotero.org/download/" target="_blank" rel="noopener">官网下载</a>Zotero和Zotero Connector。前者是管理文献的本体；后者是用于抓取条目和相关附件的浏览器插件。</p></li><li><p>设置同步<br>Zotero本身自带同步功能，但是自带空间有限，故可以使用webdav连接到其他网盘，以坚果云为例：<a href="http://help.jianguoyun.com/?p=3168" target="_blank" rel="noopener">如何在Zotero中设置webdav连接到坚果云？</a></p></li><li><p>设置Zotfile<br>Zotfile是一款插件，配合Zotero使用可以更好地管理（批量命名和移除等）文献附件：<a href="http://zotfile.com/#how-to-install--set-up-zotfile" target="_blank" rel="noopener">下载和设置</a>。</p></li></ul><h4 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h4><ul><li>导出参考文献（Word/Latex）<br>若<a href="https://www.zotero.org/support/creating_bibliographies" target="_blank" rel="noopener">不使用插件</a>，❶直接拖拽条目至文本编辑器/使用快捷键即可实现单条目的快速复制；❷在Zotero中选取所需条目，右键选择<code>由所选条目创建引文目录</code>即可实现多条目的快速复制。<br>若<a href="https://www.zotero.org/support/word_processor_integration" target="_blank" rel="noopener">使用插件</a>，以Word为例，在成功安装插件的前提下Word菜单栏中会出现Zotero选项卡，可方便地添加引用和参考文献。</li><li>Papership（ipad/iphone端）<br>Zotero只有PC端应用，配合Papership使用可以弥补该不足。用Zotero账户登录Papership应用，并<a href="http://shazino.freshdesk.com/support/solutions/articles/112464-how-to-sync-papership-and-zotero-" target="_blank" rel="noopener">设置</a>Zotero File Hosting（与步骤1.2设置同步类似）就可以在平板和手机上同步阅读文献了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="指南" scheme="http://sibyl233.github.io/categories/%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="工具" scheme="http://sibyl233.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>语义分割方法整理</title>
    <link href="http://sibyl233.github.io/2019/09/23/Semantic-Segmentation/"/>
    <id>http://sibyl233.github.io/2019/09/23/Semantic-Segmentation/</id>
    <published>2019-09-23T05:43:58.000Z</published>
    <updated>2020-04-21T12:12:43.022Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Basis"><a href="#Basis" class="headerlink" title="Basis"></a>Basis</h4><ul><li>FCN<ul><li>[FCN] Fully Convolutional Networks for Semantic Segmentation</li></ul></li><li>DeepLab<ul><li>[DeepLab v1] Semantic Image Segmentation with Deep Convolutional Nets and Fully Connected CRFs </li><li>[DeepLab v2] DeepLab: Semantic Image Segmentation with Deep Convolutional Nets, Atrous Convolution, and Fully Connected CRFs</li><li>[DeepLab v3] Rethinking Atrous Convolution for Semantic Image Segmentation </li><li>[DeepLab v3+] Encoder-Decoder with Atrous Separable Convolution for Semantic Image Segmentation</li></ul></li><li>Encoder-decoder Architecture<ul><li>[U-Net] U-Net: Convolutional Networks for Biomedical Image Segmentation </li><li>[SegNet] SegNet: A Deep Convolutional Encoder-Decoder Architecture for Scene Segmentation</li><li>[DeconvNet] Learning Deconvolution Network for Semantic Segmentation</li><li>[RefineNet] RefineNet: Multi-Path Refinement Networks for High-Resolution Semantic Segmentation</li></ul></li></ul><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><h5 id="CRF"><a href="#CRF" class="headerlink" title="CRF"></a>CRF</h5><ul><li>[CRFasRNN] Efficient Inference in Fully Connected CRFs with Gaussian Edge Potentials</li><li>[MRF] Semantic Image Segmentation via Deep Parsing Network</li><li>[GRF] Fast, Exact and Multi-Scale Inference for Semantic Image Segmentation with Deep Gaussian CRFs</li></ul><h5 id="Atrous-Dilated-Convolution"><a href="#Atrous-Dilated-Convolution" class="headerlink" title="Atrous/Dilated Convolution"></a>Atrous/Dilated Convolution</h5><ul><li>[DUC-HDC] Understanding Convolution for Semantic Segmentation</li><li>[DRN] Dilated Residual Networks</li><li>Smoothed Dilated Convolutions for Improved Dense Prediction</li><li>Efficient Smoothing of Dilated Convolutions for Image Segmentation</li><li>[FastFCN] FastFCN: Rethinking Dilated Convolution in the Backbone for Semantic Segmentation</li></ul><h5 id="Context-Aggregation"><a href="#Context-Aggregation" class="headerlink" title="Context Aggregation"></a>Context Aggregation</h5><ul><li>Pooling<ul><li>[ParseNet] ParseNet: Looking Wider to See Better</li><li>[PSPNet] Pyramid Scene Parsing Network</li><li>[DenseASPP] DenseASPP for Semantic Segmentation in Street Scenes</li><li>[VortexPooling] Vortex Pooling: Improving Context Representation in Semantic Segmentation</li></ul></li><li>Large Kernel<ul><li>[GCN] Large Kernel Matters — Improve Semantic Segmentation by Global Convolutional Network</li><li>[ExFuse] ExFuse: Enhancing Feature Fusion for Semantic Segmentation</li></ul></li></ul><h5 id="Attention-Mechanism"><a href="#Attention-Mechanism" class="headerlink" title="Attention Mechanism"></a>Attention Mechanism</h5><ul><li>Channel Reweighting<ul><li>[DFN] Learning a Discriminative Feature Network for Semantic Segmentation</li><li>[EncNet] Context Encoding for Semantic Segmentation[</li><li>[SENet] Squeeze-and-Excitation Networks</li><li>Pyramid Attention Network for Semantic Segmentation</li></ul></li><li>Spatial Attention<ul><li>[OCNet] OCNet: Object Context Network for Scene Parsing</li><li>[DANet] Dual Attention Networks for Multimodal Reasoning and Matching</li><li>[PSANet] PSANet: Point-wise Spatial Attention Network for Scene Parsing</li><li>[CCNet] CCNet: Criss-Cross Attention for Semantic Segmentation</li></ul></li></ul><h5 id="Graph-Convolution"><a href="#Graph-Convolution" class="headerlink" title="Graph Convolution"></a>Graph Convolution</h5><ul><li>[GloRe] Graph-Based Global Reasoning Networks</li><li>Beyond Grids: Learning Graph Representations for Visual Recognition</li></ul><h4 id="Real-time-Method"><a href="#Real-time-Method" class="headerlink" title="Real-time Method"></a>Real-time Method</h4><h5 id="Convolution-Factorization"><a href="#Convolution-Factorization" class="headerlink" title="Convolution Factorization"></a>Convolution Factorization</h5><ul><li>[ENet] ENet: A Deep Neural Network Architecture for Real-Time Semantic Segmentation</li><li>[ERFNet]  ERFNet: Efficient Residual Factorized ConvNet for Real-Time Semantic Segmentation</li><li>[ESPNet] ESPNet: Efficient Spatial Pyramid of Dilated Convolutions for Semantic Segmentation</li><li>[ESNet] ESNet: An Efficient Symmetric Network for Real-time Semantic Segmentation</li><li>[LEDNet] LEDNet: A Lightweight Encoder-Decoder Network for Real-Time Semantic Segmentation</li><li>[DABNet] DABNet: Depth-wise Asymmetric Bottleneck for Real-time Semantic Segmentation</li></ul><h5 id="Multi-branch"><a href="#Multi-branch" class="headerlink" title="Multi-branch"></a>Multi-branch</h5><ul><li>[ICNet] ICNet for Real-Time Semantic Segmentation on High-Resolution Images</li><li>[ContextNet] ContextNet: Exploring Context and Detail for Semantic Segmentation in Real-time</li><li>[BiSeNet] BiSeNet: Bilateral Segmentation Network for Real-Time Semantic Segmentation</li></ul><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul><li>语义分割论文整理 [<a href="https://zhangbin0917.github.io/2018/09/18/Semantic-Segmentation/" target="_blank" rel="noopener">blog</a>]</li><li>Survey on semantic segmentation using deep learning techniques [<a href="https://www.sciencedirect.com/science/article/pii/S092523121930181X" target="_blank" rel="noopener">paper</a>]</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="笔记" scheme="http://sibyl233.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>道路场景语义分割</title>
    <link href="http://sibyl233.github.io/2019/07/11/%E9%81%93%E8%B7%AF%E5%9C%BA%E6%99%AF%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    <id>http://sibyl233.github.io/2019/07/11/道路场景语义分割/</id>
    <published>2019-07-11T03:35:50.000Z</published>
    <updated>2020-04-21T12:12:38.886Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h4><ul><li><a href="http://apolloscape.auto/scene.html" target="_blank" rel="noopener">Apolloscape Scene Parsing</a></li><li><a href="https://bair.berkeley.edu/blog/2018/05/30/bdd/" target="_blank" rel="noopener">BDD100k</a></li><li><a href="http://mi.eng.cam.ac.uk/research/projects/VideoRec/CamVid/" target="_blank" rel="noopener">CamVid</a></li><li><a href="https://www.cityscapes-dataset.com/" target="_blank" rel="noopener">Cityscapes</a></li><li><a href="http://www.6d-vision.com/scene-labeling" target="_blank" rel="noopener">Daimler Urban Segmentation</a></li><li><a href="http://www.cvlibs.net/datasets/kitti/eval_semantics.php" target="_blank" rel="noopener">Kitti</a></li><li><a href="https://www.mapillary.com/dataset/" target="_blank" rel="noopener">Mapillary Vistas</a></li></ul><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><table><thead><tr><th>Method</th><th>Cityscapes(%)</th><th>CamVid(%)</th><th>Publication</th></tr></thead><tbody><tr><td>FCN-8s</td><td>65.3</td><td></td><td>CVPR2015</td></tr><tr><td>SegNet</td><td></td><td>50.2</td><td>arXiv15</td></tr><tr><td>DeepLab v2</td><td>70.4</td><td></td><td>PAMI2018</td></tr><tr><td>G-FRNet</td><td></td><td>68.0</td><td>CVPR2017</td></tr><tr><td>FRRN B</td><td>71.8</td><td></td><td>CVPR2017</td></tr><tr><td>RefineNet</td><td>73.6</td><td></td><td>CVPR2017</td></tr><tr><td>GCN</td><td>76.9</td><td></td><td>CVPR2017</td></tr><tr><td>TKCN</td><td>79.5</td><td></td><td>ICME2019</td></tr><tr><td>DUC-HDC</td><td>80.1</td><td></td><td>WACV2018</td></tr><tr><td>PSANet</td><td>80.1</td><td></td><td>ECCV2018</td></tr><tr><td>PSPNet</td><td>80.2</td><td></td><td>CVPR2017</td></tr><tr><td>DDSC</td><td></td><td>70.9</td><td>CVPR2018</td></tr><tr><td>DFN</td><td>80.3</td><td></td><td>CVPR2018</td></tr><tr><td>DenseASPP</td><td>80.6</td><td></td><td>CVPR2018</td></tr><tr><td>LDN</td><td>80.6</td><td>78.1</td><td>arXiv19</td></tr><tr><td>GloRe</td><td>80.9</td><td></td><td>CVPR2019</td></tr><tr><td>OCNet</td><td>81.2</td><td></td><td>arXiv18</td></tr><tr><td>DeepLab v3</td><td>81.3</td><td></td><td>arXiv17</td></tr><tr><td>CCNet</td><td>81.4</td><td></td><td>arXiv18</td></tr><tr><td>DAN</td><td>81.5</td><td></td><td>CVPR2019</td></tr><tr><td>HRNetV2</td><td>81.6</td><td></td><td>arXiv19</td></tr><tr><td>CaseNet</td><td>81.9</td><td></td><td>arXiv19</td></tr><tr><td>DeepLab v3+</td><td>82.1</td><td></td><td>ECCV2018</td></tr><tr><td>GFF</td><td>82.3</td><td></td><td>arXiv19</td></tr><tr><td>DPC</td><td>82.7</td><td></td><td>NIPS2018</td></tr><tr><td>GSCNN</td><td>82.8</td><td></td><td>ICCV2019</td></tr></tbody></table><h4 id="Real-time-Method"><a href="#Real-time-Method" class="headerlink" title="Real-time Method"></a>Real-time Method</h4><table><thead><tr><th>Method</th><th>WxH</th><th>mIOU(%)</th><th>FPS</th><th>GFLOPs</th><th>Param(M)</th></tr></thead><tbody><tr><td>ENet</td><td>1920x1080</td><td>58.3</td><td>21.6</td><td>3.83</td><td>0.37</td></tr><tr><td>SQ</td><td>2048x1024</td><td>59.8</td><td>-</td><td>-</td><td>-</td></tr><tr><td>TwoColumn</td><td>1024x512</td><td>72.9</td><td>14.7</td><td>-</td><td>-</td></tr><tr><td>CGNet</td><td>2048x1024</td><td>64.8</td><td>17.6</td><td>6</td><td>0.5</td></tr><tr><td>ESPNet</td><td>-</td><td>60.3</td><td>4</td><td>-</td><td>0.4</td></tr><tr><td>ERFNet</td><td>-</td><td>68</td><td>-</td><td>-</td><td>-</td></tr><tr><td>ICNet</td><td>2048x1024</td><td>69.5</td><td>30.3</td><td>-</td><td>-</td></tr><tr><td>BiSeNet</td><td>1536x768</td><td>68.4</td><td>105.8</td><td>2.9</td><td>5.8</td></tr><tr><td></td><td>1536x768</td><td>74.7</td><td>65.5</td><td>10.8</td><td>49</td></tr><tr><td>ESNet</td><td>-</td><td>70.7</td><td>63</td><td>-</td><td>1.66</td></tr><tr><td>DFANet</td><td>1024x1024</td><td>71.3</td><td>100</td><td>3.4</td><td>7.8</td></tr><tr><td>LEDNet</td><td>1024x512</td><td>70.1</td><td>71</td><td>-</td><td>0.94</td></tr><tr><td>DABNet</td><td>1024x512</td><td>70.1</td><td>104.2</td><td>-</td><td>0.76</td></tr><tr><td>SqueezeNAS</td><td>1024x512</td><td>72.5</td><td>-</td><td>-</td><td>1.9</td></tr><tr><td>*上表为文献中各方法在Cityscapes上的性能</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="笔记" scheme="http://sibyl233.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>一个测试</title>
    <link href="http://sibyl233.github.io/2018/05/11/%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95/"/>
    <id>http://sibyl233.github.io/2018/05/11/一个测试/</id>
    <published>2018-05-11T11:20:15.000Z</published>
    <updated>2019-02-05T07:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ヾ(๑╹◡╹)ﾉ”  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="胡言" scheme="http://sibyl233.github.io/categories/%E8%83%A1%E8%A8%80/"/>
    
    
  </entry>
  
</feed>
